/**
 * This class is generated by jOOQ
 */
package catalog.angularjs.generated.tables;

/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(value    = { "http://www.jooq.org", "3.4.5" },
                            comments = "This class is generated by jOOQ")
@java.lang.SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Author extends org.jooq.impl.TableImpl<catalog.angularjs.generated.tables.records.AuthorRecord> {

	private static final long serialVersionUID = 230875294;

	/**
	 * The singleton instance of <code>public.author</code>
	 */
	public static final catalog.angularjs.generated.tables.Author AUTHOR = new catalog.angularjs.generated.tables.Author();

	/**
	 * The class holding records for this type
	 */
	@Override
	public java.lang.Class<catalog.angularjs.generated.tables.records.AuthorRecord> getRecordType() {
		return catalog.angularjs.generated.tables.records.AuthorRecord.class;
	}

	/**
	 * The column <code>public.author.id_author</code>.
	 */
	public final org.jooq.TableField<catalog.angularjs.generated.tables.records.AuthorRecord, java.lang.Integer> ID_AUTHOR = createField("id_author", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>public.author.first_name</code>.
	 */
	public final org.jooq.TableField<catalog.angularjs.generated.tables.records.AuthorRecord, java.lang.String> FIRST_NAME = createField("first_name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

	/**
	 * The column <code>public.author.second_name</code>.
	 */
	public final org.jooq.TableField<catalog.angularjs.generated.tables.records.AuthorRecord, java.lang.String> SECOND_NAME = createField("second_name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

	/**
	 * Create a <code>public.author</code> table reference
	 */
	public Author() {
		this("author", null);
	}

	/**
	 * Create an aliased <code>public.author</code> table reference
	 */
	public Author(java.lang.String alias) {
		this(alias, catalog.angularjs.generated.tables.Author.AUTHOR);
	}

	private Author(java.lang.String alias, org.jooq.Table<catalog.angularjs.generated.tables.records.AuthorRecord> aliased) {
		this(alias, aliased, null);
	}

	private Author(java.lang.String alias, org.jooq.Table<catalog.angularjs.generated.tables.records.AuthorRecord> aliased, org.jooq.Field<?>[] parameters) {
		super(alias, catalog.angularjs.generated.Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Identity<catalog.angularjs.generated.tables.records.AuthorRecord, java.lang.Integer> getIdentity() {
		return catalog.angularjs.generated.Keys.IDENTITY_AUTHOR;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.UniqueKey<catalog.angularjs.generated.tables.records.AuthorRecord> getPrimaryKey() {
		return catalog.angularjs.generated.Keys.AUTHOR_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.util.List<org.jooq.UniqueKey<catalog.angularjs.generated.tables.records.AuthorRecord>> getKeys() {
		return java.util.Arrays.<org.jooq.UniqueKey<catalog.angularjs.generated.tables.records.AuthorRecord>>asList(catalog.angularjs.generated.Keys.AUTHOR_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public catalog.angularjs.generated.tables.Author as(java.lang.String alias) {
		return new catalog.angularjs.generated.tables.Author(alias, this);
	}

	/**
	 * Rename this table
	 */
	public catalog.angularjs.generated.tables.Author rename(java.lang.String name) {
		return new catalog.angularjs.generated.tables.Author(name, null);
	}
}
