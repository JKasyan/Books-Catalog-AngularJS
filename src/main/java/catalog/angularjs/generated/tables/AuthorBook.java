/**
 * This class is generated by jOOQ
 */
package catalog.angularjs.generated.tables;


import catalog.angularjs.generated.Keys;
import catalog.angularjs.generated.Public;
import catalog.angularjs.generated.tables.records.AuthorBookRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthorBook extends TableImpl<AuthorBookRecord> {

	private static final long serialVersionUID = -240994047;

	/**
	 * The reference instance of <code>public.author_book</code>
	 */
	public static final AuthorBook AUTHOR_BOOK = new AuthorBook();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<AuthorBookRecord> getRecordType() {
		return AuthorBookRecord.class;
	}

	/**
	 * The column <code>public.author_book.id_author</code>.
	 */
	public final TableField<AuthorBookRecord, Integer> ID_AUTHOR = createField("id_author", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>public.author_book.id_book</code>.
	 */
	public final TableField<AuthorBookRecord, Integer> ID_BOOK = createField("id_book", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * Create a <code>public.author_book</code> table reference
	 */
	public AuthorBook() {
		this("author_book", null);
	}

	/**
	 * Create an aliased <code>public.author_book</code> table reference
	 */
	public AuthorBook(String alias) {
		this(alias, AUTHOR_BOOK);
	}

	private AuthorBook(String alias, Table<AuthorBookRecord> aliased) {
		this(alias, aliased, null);
	}

	private AuthorBook(String alias, Table<AuthorBookRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<AuthorBookRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<AuthorBookRecord, ?>>asList(Keys.AUTHOR_BOOK__AUTHOR_FK, Keys.AUTHOR_BOOK__BOOK_FK);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AuthorBook as(String alias) {
		return new AuthorBook(alias, this);
	}

	/**
	 * Rename this table
	 */
	public AuthorBook rename(String name) {
		return new AuthorBook(name, null);
	}
}
