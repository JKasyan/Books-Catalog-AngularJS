/**
 * This class is generated by jOOQ
 */
package catalog.angularjs.generated.tables.records;


import catalog.angularjs.generated.tables.Book;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BookRecord extends UpdatableRecordImpl<BookRecord> implements Record4<Integer, String, String, String> {

	private static final long serialVersionUID = -697418248;

	/**
	 * Setter for <code>public.book.id_book</code>.
	 */
	public void setIdBook(Integer value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>public.book.id_book</code>.
	 */
	public Integer getIdBook() {
		return (Integer) getValue(0);
	}

	/**
	 * Setter for <code>public.book.title</code>.
	 */
	public void setTitle(String value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>public.book.title</code>.
	 */
	public String getTitle() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>public.book.short_description</code>.
	 */
	public void setShortDescription(String value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>public.book.short_description</code>.
	 */
	public String getShortDescription() {
		return (String) getValue(2);
	}

	/**
	 * Setter for <code>public.book.date_publish</code>.
	 */
	public void setDatePublish(String value) {
		setValue(3, value);
	}

	/**
	 * Getter for <code>public.book.date_publish</code>.
	 */
	public String getDatePublish() {
		return (String) getValue(3);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Integer> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record4 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<Integer, String, String, String> fieldsRow() {
		return (Row4) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<Integer, String, String, String> valuesRow() {
		return (Row4) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field1() {
		return Book.BOOK.ID_BOOK;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return Book.BOOK.TITLE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field3() {
		return Book.BOOK.SHORT_DESCRIPTION;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field4() {
		return Book.BOOK.DATE_PUBLISH;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value1() {
		return getIdBook();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getTitle();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value3() {
		return getShortDescription();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value4() {
		return getDatePublish();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public BookRecord value1(Integer value) {
		setIdBook(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public BookRecord value2(String value) {
		setTitle(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public BookRecord value3(String value) {
		setShortDescription(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public BookRecord value4(String value) {
		setDatePublish(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public BookRecord values(Integer value1, String value2, String value3, String value4) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached BookRecord
	 */
	public BookRecord() {
		super(Book.BOOK);
	}

	/**
	 * Create a detached, initialised BookRecord
	 */
	public BookRecord(Integer idBook, String title, String shortDescription, String datePublish) {
		super(Book.BOOK);

		setValue(0, idBook);
		setValue(1, title);
		setValue(2, shortDescription);
		setValue(3, datePublish);
	}
}
