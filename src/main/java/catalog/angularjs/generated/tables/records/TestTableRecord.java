/**
 * This class is generated by jOOQ
 */
package catalog.angularjs.generated.tables.records;


import catalog.angularjs.generated.tables.TestTable;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestTableRecord extends UpdatableRecordImpl<TestTableRecord> implements Record2<String, Integer> {

	private static final long serialVersionUID = -1412004418;

	/**
	 * Setter for <code>public.test_table.some_text</code>.
	 */
	public void setSomeText(String value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>public.test_table.some_text</code>.
	 */
	public String getSomeText() {
		return (String) getValue(0);
	}

	/**
	 * Setter for <code>public.test_table.id</code>.
	 */
	public void setId(Integer value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>public.test_table.id</code>.
	 */
	public Integer getId() {
		return (Integer) getValue(1);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Integer> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record2 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row2<String, Integer> fieldsRow() {
		return (Row2) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row2<String, Integer> valuesRow() {
		return (Row2) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field1() {
		return TestTable.TEST_TABLE.SOME_TEXT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field2() {
		return TestTable.TEST_TABLE.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value1() {
		return getSomeText();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value2() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TestTableRecord value1(String value) {
		setSomeText(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TestTableRecord value2(Integer value) {
		setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TestTableRecord values(String value1, Integer value2) {
		value1(value1);
		value2(value2);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached TestTableRecord
	 */
	public TestTableRecord() {
		super(TestTable.TEST_TABLE);
	}

	/**
	 * Create a detached, initialised TestTableRecord
	 */
	public TestTableRecord(String someText, Integer id) {
		super(TestTable.TEST_TABLE);

		setValue(0, someText);
		setValue(1, id);
	}
}
