/**
 * This class is generated by jOOQ
 */
package catalog.angularjs.generated.tables.records;

/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(value    = { "http://www.jooq.org", "3.4.5" },
                            comments = "This class is generated by jOOQ")
@java.lang.SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthorBookRecord extends org.jooq.impl.UpdatableRecordImpl<catalog.angularjs.generated.tables.records.AuthorBookRecord> implements org.jooq.Record2<java.lang.Integer, java.lang.Integer> {

	private static final long serialVersionUID = 400359605;

	/**
	 * Setter for <code>public.author_book.id_author</code>.
	 */
	public void setIdAuthor(java.lang.Integer value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>public.author_book.id_author</code>.
	 */
	public java.lang.Integer getIdAuthor() {
		return (java.lang.Integer) getValue(0);
	}

	/**
	 * Setter for <code>public.author_book.id_book</code>.
	 */
	public void setIdBook(java.lang.Integer value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>public.author_book.id_book</code>.
	 */
	public java.lang.Integer getIdBook() {
		return (java.lang.Integer) getValue(1);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Record2<java.lang.Integer, java.lang.Integer> key() {
		return (org.jooq.Record2) super.key();
	}

	// -------------------------------------------------------------------------
	// Record2 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Row2<java.lang.Integer, java.lang.Integer> fieldsRow() {
		return (org.jooq.Row2) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Row2<java.lang.Integer, java.lang.Integer> valuesRow() {
		return (org.jooq.Row2) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.lang.Integer> field1() {
		return catalog.angularjs.generated.tables.AuthorBook.AUTHOR_BOOK.ID_AUTHOR;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.lang.Integer> field2() {
		return catalog.angularjs.generated.tables.AuthorBook.AUTHOR_BOOK.ID_BOOK;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.lang.Integer value1() {
		return getIdAuthor();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.lang.Integer value2() {
		return getIdBook();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AuthorBookRecord value1(java.lang.Integer value) {
		setIdAuthor(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AuthorBookRecord value2(java.lang.Integer value) {
		setIdBook(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AuthorBookRecord values(java.lang.Integer value1, java.lang.Integer value2) {
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached AuthorBookRecord
	 */
	public AuthorBookRecord() {
		super(catalog.angularjs.generated.tables.AuthorBook.AUTHOR_BOOK);
	}

	/**
	 * Create a detached, initialised AuthorBookRecord
	 */
	public AuthorBookRecord(java.lang.Integer idAuthor, java.lang.Integer idBook) {
		super(catalog.angularjs.generated.tables.AuthorBook.AUTHOR_BOOK);

		setValue(0, idAuthor);
		setValue(1, idBook);
	}
}
