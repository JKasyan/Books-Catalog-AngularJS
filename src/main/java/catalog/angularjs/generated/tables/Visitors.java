/**
 * This class is generated by jOOQ
 */
package catalog.angularjs.generated.tables;


import catalog.angularjs.generated.Keys;
import catalog.angularjs.generated.Public;
import catalog.angularjs.generated.tables.records.VisitorsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Visitors extends TableImpl<VisitorsRecord> {

	private static final long serialVersionUID = 1114466986;

	/**
	 * The reference instance of <code>public.visitors</code>
	 */
	public static final Visitors VISITORS = new Visitors();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<VisitorsRecord> getRecordType() {
		return VisitorsRecord.class;
	}

	/**
	 * The column <code>public.visitors.id</code>.
	 */
	public final TableField<VisitorsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>public.visitors.username</code>.
	 */
	public final TableField<VisitorsRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR.length(15).nullable(false), this, "");

	/**
	 * The column <code>public.visitors.date</code>.
	 */
	public final TableField<VisitorsRecord, Timestamp> DATE = createField("date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>public.visitors.ip_address</code>.
	 */
	public final TableField<VisitorsRecord, String> IP_ADDRESS = createField("ip_address", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

	/**
	 * Create a <code>public.visitors</code> table reference
	 */
	public Visitors() {
		this("visitors", null);
	}

	/**
	 * Create an aliased <code>public.visitors</code> table reference
	 */
	public Visitors(String alias) {
		this(alias, VISITORS);
	}

	private Visitors(String alias, Table<VisitorsRecord> aliased) {
		this(alias, aliased, null);
	}

	private Visitors(String alias, Table<VisitorsRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<VisitorsRecord, Integer> getIdentity() {
		return Keys.IDENTITY_VISITORS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<VisitorsRecord> getPrimaryKey() {
		return Keys.VISITORS_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<VisitorsRecord>> getKeys() {
		return Arrays.<UniqueKey<VisitorsRecord>>asList(Keys.VISITORS_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Visitors as(String alias) {
		return new Visitors(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Visitors rename(String name) {
		return new Visitors(name, null);
	}
}
