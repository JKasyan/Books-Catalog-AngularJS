/**
 * This class is generated by jOOQ
 */
package catalog.angularjs.generated;


import catalog.angularjs.generated.tables.Author;
import catalog.angularjs.generated.tables.AuthorBook;
import catalog.angularjs.generated.tables.Book;
import catalog.angularjs.generated.tables.TestTable;
import catalog.angularjs.generated.tables.Visitor;
import catalog.angularjs.generated.tables.records.AuthorBookRecord;
import catalog.angularjs.generated.tables.records.AuthorRecord;
import catalog.angularjs.generated.tables.records.BookRecord;
import catalog.angularjs.generated.tables.records.TestTableRecord;
import catalog.angularjs.generated.tables.records.VisitorRecord;

import javax.annotation.Generated;

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;


/**
 * A class modelling foreign key relationships between tables of the <code>public</code> 
 * schema
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

	// -------------------------------------------------------------------------
	// IDENTITY definitions
	// -------------------------------------------------------------------------

	public static final Identity<AuthorRecord, Integer> IDENTITY_AUTHOR = Identities0.IDENTITY_AUTHOR;
	public static final Identity<BookRecord, Integer> IDENTITY_BOOK = Identities0.IDENTITY_BOOK;
	public static final Identity<TestTableRecord, Integer> IDENTITY_TEST_TABLE = Identities0.IDENTITY_TEST_TABLE;
	public static final Identity<VisitorRecord, Integer> IDENTITY_VISITOR = Identities0.IDENTITY_VISITOR;

	// -------------------------------------------------------------------------
	// UNIQUE and PRIMARY KEY definitions
	// -------------------------------------------------------------------------

	public static final UniqueKey<AuthorRecord> AUTHOR_PKEY = UniqueKeys0.AUTHOR_PKEY;
	public static final UniqueKey<AuthorBookRecord> AUTHOR_BOOK_PKEY = UniqueKeys0.AUTHOR_BOOK_PKEY;
	public static final UniqueKey<BookRecord> BOOK_PKEY = UniqueKeys0.BOOK_PKEY;
	public static final UniqueKey<TestTableRecord> PK_TT = UniqueKeys0.PK_TT;
	public static final UniqueKey<VisitorRecord> VISITORS_PKEY = UniqueKeys0.VISITORS_PKEY;

	// -------------------------------------------------------------------------
	// FOREIGN KEY definitions
	// -------------------------------------------------------------------------

	public static final ForeignKey<AuthorBookRecord, AuthorRecord> AUTHOR_BOOK__FK_HD1420EVGMR13OJDCNJGWNVPO = ForeignKeys0.AUTHOR_BOOK__FK_HD1420EVGMR13OJDCNJGWNVPO;
	public static final ForeignKey<AuthorBookRecord, BookRecord> AUTHOR_BOOK__FK_T75G0MH6JFEPBL5DE8Y0Q82EK = ForeignKeys0.AUTHOR_BOOK__FK_T75G0MH6JFEPBL5DE8Y0Q82EK;

	// -------------------------------------------------------------------------
	// [#1459] distribute members to avoid static initialisers > 64kb
	// -------------------------------------------------------------------------

	private static class Identities0 extends AbstractKeys {
		public static Identity<AuthorRecord, Integer> IDENTITY_AUTHOR = createIdentity(Author.AUTHOR, Author.AUTHOR.ID_AUTHOR);
		public static Identity<BookRecord, Integer> IDENTITY_BOOK = createIdentity(Book.BOOK, Book.BOOK.ID_BOOK);
		public static Identity<TestTableRecord, Integer> IDENTITY_TEST_TABLE = createIdentity(TestTable.TEST_TABLE, TestTable.TEST_TABLE.ID);
		public static Identity<VisitorRecord, Integer> IDENTITY_VISITOR = createIdentity(Visitor.VISITOR, Visitor.VISITOR.ID);
	}

	private static class UniqueKeys0 extends AbstractKeys {
		public static final UniqueKey<AuthorRecord> AUTHOR_PKEY = createUniqueKey(Author.AUTHOR, Author.AUTHOR.ID_AUTHOR);
		public static final UniqueKey<AuthorBookRecord> AUTHOR_BOOK_PKEY = createUniqueKey(AuthorBook.AUTHOR_BOOK, AuthorBook.AUTHOR_BOOK.ID_AUTHOR, AuthorBook.AUTHOR_BOOK.ID_BOOK);
		public static final UniqueKey<BookRecord> BOOK_PKEY = createUniqueKey(Book.BOOK, Book.BOOK.ID_BOOK);
		public static final UniqueKey<TestTableRecord> PK_TT = createUniqueKey(TestTable.TEST_TABLE, TestTable.TEST_TABLE.ID);
		public static final UniqueKey<VisitorRecord> VISITORS_PKEY = createUniqueKey(Visitor.VISITOR, Visitor.VISITOR.ID);
	}

	private static class ForeignKeys0 extends AbstractKeys {
		public static final ForeignKey<AuthorBookRecord, AuthorRecord> AUTHOR_BOOK__FK_HD1420EVGMR13OJDCNJGWNVPO = createForeignKey(catalog.angularjs.generated.Keys.AUTHOR_PKEY, AuthorBook.AUTHOR_BOOK, AuthorBook.AUTHOR_BOOK.ID_AUTHOR);
		public static final ForeignKey<AuthorBookRecord, BookRecord> AUTHOR_BOOK__FK_T75G0MH6JFEPBL5DE8Y0Q82EK = createForeignKey(catalog.angularjs.generated.Keys.BOOK_PKEY, AuthorBook.AUTHOR_BOOK, AuthorBook.AUTHOR_BOOK.ID_BOOK);
	}
}
